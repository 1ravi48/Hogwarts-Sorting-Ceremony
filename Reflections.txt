Reflections:
1 - The main App component renders different content based on certain conditions, and I have written all of this content into the App component. Really, I should have written the different bits of content as separate components, making the App component a bit more readable. Challenges with this would be ensuring state is properly lifted up and passed down as props to each of the child components within App.

2 - I should have thought about responsive styling from the get-go rather than doing this at the end. Although it might have slowed the process down, it makes the responsive styling much easier to do.

3 - My App component alters global variables outside of it, making the component an "impure" function as it changes variables that were declared before it was called. These global variables should really have been state variables within App.

4 - Whenever React re-renders a component, any regular variables that have been updated get reset to their original declared value - React does not remember the updated values assigned to this variable. Any variables that I want React to track MUST be stored as state.

5 - Whenever a state variable is updated inside a function, the state variable is not immediately updated inside the function execution - it has been scheduled to updated once the function execution finishes. This means that if this state variable is used later during the same function execution, its value here will still be its current value, not the updated value you would expect it to be - the state variable DOES NOT immediately update until the function execution has finished. This is due to the async nature of React's state updates.

6 - <p> tags by default always have margins set on them! This can cause you problems when styling with flexbox.

7 - When using media queries for responsive styling, all original styling rules are still applied unless you explicitly override them within the media query rules.

8 - In CSS, using box-sizing: border-box ensures that the padding is included when you set heights and widths to be 100% of their parent container (meaning that when you apply padding, it doesn't then override the parent container and stays within!)

9 - In CSS, the aspect ratio property can be used instead of setting a height. This means that the height will change with the width of the element in order to maintain a certain aspect ratio (especially useful if the width is a responsive width set as a percentage).

10 - Percentages for font sizes are a percentage of the font size of the parent container's font size (assuming it has been set), they are NOT a percentage of the container's width as you have always assumed!